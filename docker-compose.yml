services:
  # ----------------- Databases -----------------
  user_db:
    image: postgres
    container_name: user_db
    environment:
      POSTGRES_USER: user_admin
      POSTGRES_PASSWORD: user_password
      POSTGRES_DB: userdb
    volumes:
      - user_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - microservices-net


  project_db:
    image: postgres
    container_name: project_db
    environment:
      POSTGRES_USER: project_admin
      POSTGRES_PASSWORD: project_password
      POSTGRES_DB: projectdb
    volumes:
      - project_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - microservices-net

  financial_db:
    image: postgres
    container_name: financial_db
    environment:
      POSTGRES_USER: financial_admin
      POSTGRES_PASSWORD: financial_password
      POSTGRES_DB: financial_db
    volumes:
      - financial_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - microservices-net

  inspection_db:
    image: mongo
    container_name: inspection_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: inspection_admin
      MONGO_INITDB_ROOT_PASSWORD: inspection_password
    volumes:
      - inspection_data:/data/db
    ports:
      - "27018:27017"
    networks:
      - microservices-net

  timesheet_db:
    image: mongo
    container_name: timesheet_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: timesheet_admin
      MONGO_INITDB_ROOT_PASSWORD: timesheet_password
    volumes:
      - timesheet_data:/data/db
    ports:
      - "27019:27017"
    networks:
      - microservices-net

  procurement_db:
    image: postgres
    container_name: procurement_db
    environment:
      POSTGRES_USER: procurement_admin
      POSTGRES_PASSWORD: procurement_password
      POSTGRES_DB: procurementdb
    volumes:
      - procurement_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - microservices-net

  # ---------------- Message Broker ----------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
      image: confluentinc/cp-kafka:7.0.0
      container_name: kafka
      ports:
        - "9092:9092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CREATE_TOPICS: "financial-notifications:1:1"
      depends_on:
        zookeeper:
          condition: service_healthy
      networks:
        - microservices-net

  kafka-ui:
      image: provectuslabs/kafka-ui
      container_name: kafka-ui
      ports:
        - "8085:8080"
      environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      depends_on:
        - kafka
      networks:
        - microservices-net


  # ---------------- Monitoring & Tools ----------------
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tensai.com
      PGADMIN_DEFAULT_PASSWORD: tensai
    ports:
      - "5050:80"
    networks:
      - microservices-net

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: tensai
      ME_CONFIG_MONGODB_ADMINPASSWORD: tensai
    ports:
      - "8081:8081"
    depends_on:
      - inspection_db
      - timesheet_db
    networks:
      - microservices-net

  zipkin:
     image: openzipkin/zipkin
     container_name: zipkin
     ports:
       - "9411:9411"
     networks:
       - microservices-net

  # mail-dev:
  #   image: maildev/maildev
  #   container_name: mail_dev
  #   ports:
  #     - "1080:1080"  # MailDev web interface
  #     - "1025:1025"  # SMTP server
  #   networks:
  #     - microservices-net

  # ---------------- Angular App ----------------
#  angular-app:
#    build: .
#    container_name: angular_app
#    ports:
#      - "4200:4200"
#    volumes:
#      - ./:/app
#      - /app/node_modules
#    environment:
#      NODE_ENV: development
#    command: npm start
#    networks:
#      - microservices-net

  # ---------------- Infrastructure Services ----------------
#  config-server:
#    build:
#      context: .
#      dockerfile: Backend/services/configservice/Dockerfile
#    container_name: config-server
#    ports:
#      - "8888:8888"
#    networks:
#      - microservices-net
##    healthcheck:
#      test: ["CMD", "curl", "-f","-u","admin:admin", "http://localhost:8888/actuator/health"]
#      interval: 8s
#      timeout: 5s
#      retries: 15
#      start_period: 30s


#  api-gateway:
#    build:
#      context: .
#      dockerfile: Backend/services/api-gateway/Dockerfile
#    container_name: api-gateway
#    ports:
#      - "8090:8090"
#    environment:
#      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://host.docker.internal:8761/eureka/
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    networks:
#      - microservices-net

  # ---------------- Microservices ----------------

#  financial-service:
#    build:
#      context: .
#      dockerfile: Backend/services/Financial/Dockerfile
#    container_name: financial-service
#    ports:
#      - "8083:8082"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://financial_db:5432/financial_db
#      SPRING_DATASOURCE_USERNAME: financial_admin
#      SPRING_DATASOURCE_PASSWORD: financial_password
#      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://host.docker.internal:8761/eureka/
#      SPRING_PROFILES_ACTIVE: docker
#      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#      PAYPAL_CLIENT_ID: AUZy14wNSMMv-EqT_DPWEvvwbOE3ZovoG8ysD6TFQHUHWYmcE4lHJLiJ4gbzowAdWr6Wfy0C1sO8f0K4
#      PAYPAL_CLIENT_SECRET: ENUiXFZ9XHCaljoqMvMx2GEbrbDRMzPsPzVgwTrb_GMu7UmE7mQ8ERdEBzQQIhacOnNSnH20hT-hMrn4
#      STRIPE_API_KEY: sk_test_51REEhJRqsEP0VBxEavC0WbHuu8JhJjqgQ2GiXxEGjOmR0dRGN1CGoYq9Xa2RTg0NFP65WGgBP9duaLbPuZmI5HhT005ag9hrAI
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    depends_on:
#      financial_db:
#        condition: service_started
#      kafka:
#        condition: service_started
#      config-server:
#        condition: service_healthy
#    networks:
#      - microservices-net

 

#  frontend:
#    build:
#      context: ../Front/FrontEnd/package
#      dockerfile: Dockerfile
#    container_name: frontend
#    ports:
#      - "80:80"
#    networks:
#      - microservices-net
#    depends_on:
#      - api-gateway

networks:
  microservices-net:
    driver: bridge

volumes:
  user_data:
  project_data:
  financial_data:
  inspection_data:
  timesheet_data:
  procurement_data: